version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tblog-postgres
    environment:
      POSTGRES_DB: tblog
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tblog-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d tblog"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Application (使用预构建镜像)
  app:
    image: tiansuy/tblog:${IMAGE_TAG:-latest}
    container_name: tblog-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://user:password@postgres:5432/tblog
      - JWT_SECRET=production-jwt-secret-change-this
      - JWT_EXPIRES_IN=7d
      - NEXT_PUBLIC_APP_URL=http://${SERVER_IP:-localhost}:80
    networks:
      - tblog-network
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    restart: unless-stopped

  # Database Migration and Seed Service (使用预构建镜像)
  migration:
    image: tiansuy/tblog:${IMAGE_TAG:-latest}
    container_name: tblog-migration
    command: sh -c "npx prisma migrate deploy && npx prisma db seed"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/tblog
    networks:
      - tblog-network
    depends_on:
      postgres:
        condition: service_healthy

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tblog-nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - tblog-network
    depends_on:
      - app
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  tblog-network:
    driver: bridge 